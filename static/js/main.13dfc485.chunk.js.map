{"version":3,"sources":["components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","today","Date","state","time","getRecentTime","intervalId","this","setState","window","setInterval","console","info","clearInterval","toUTCString","slice","className","props","randomName","React","Component","getRandomName","value","now","toString","App","hasClock","changeClockVisibility","_prevProps","prevState","debug","shouldShow","typeListener","document","addEventListener","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"8MAYaA,EAAb,4MACEC,MAAQ,IAAIC,KADd,EAGEC,MAAQ,CACNC,KAAM,EAAKC,gBACXC,WAAY,GALhB,uDAQE,WAA2B,IAAD,OACxBC,KAAKC,SAAS,CAAEJ,KAAMG,KAAKF,kBAE3BE,KAAKJ,MAAMG,WAAaG,OAAOC,aAAY,WACzC,EAAKF,SAAS,CAAEJ,KAAM,EAAKC,kBAC3BM,QAAQC,KAAK,EAAKT,MAAMC,QACvB,OAdP,kCAiBE,WACEK,OAAOI,cAAcN,KAAKJ,MAAMG,cAlBpC,2BAqBE,WAGE,OAFAC,KAAKN,MAAQ,IAAIC,KAEVK,KAAKN,MAAMa,cAAcC,OAAO,IAAK,KAxBhD,oBA2BE,WACE,OACE,sBAAKC,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGT,KAAKU,MAAMC,aAEd,6CACA,sBAAMF,UAAU,cAAhB,SAA+BT,KAAKJ,MAAMC,cAlClD,GAA2Be,IAAMC,W,MCPjC,SAASC,IACP,IAAMC,EAAQpB,KAAKqB,MAAMC,WAAWT,OAAO,GAE3C,MAAM,SAAN,OAAgBO,GAQX,IAAMG,EAAb,4MACEtB,MAAQ,CACNe,WAAY,UACZQ,UAAU,EACVpB,WAAY,GAJhB,uDAOE,WAA2B,IAAD,OACxBC,KAAKoB,uBAAsB,EAAO,eAClCpB,KAAKoB,uBAAsB,EAAM,SAEjCpB,KAAKJ,MAAMG,WAAaG,OAAOC,aAAY,WACzC,EAAKF,SAAS,CAAEU,WAAYG,QAC3B,QAbP,gCAgBE,SAAmBO,EAAeC,GAE9BtB,KAAKJ,MAAMuB,UAAYG,EAAUX,aAAeX,KAAKJ,MAAMe,YAE3DP,QAAQmB,MAAR,uBACkBD,EAAUX,WAD5B,eAC6CX,KAAKJ,MAAMe,eArB9D,kCA0BE,WACEL,cAAcN,KAAKJ,MAAMG,cA3B7B,mCA8BE,SAAsByB,EAAoBC,GAAuB,IAAD,OAC9DC,SAASC,iBAAiBF,GAAc,SAAAG,GACtCA,EAAMC,iBAEN,EAAK5B,SAAS,CAAEkB,SAAUK,SAlChC,oBAsCE,WACE,MAAiCxB,KAAKJ,MAA9Be,EAAR,EAAQA,WAAYQ,EAApB,EAAoBA,SAEpB,OACE,sBAAKV,UAAU,MAAf,UACE,6CACCU,GAAY,cAAC,EAAD,CAAOR,WAAYA,WA5CxC,GAAyBC,IAAMC,WCb/BiB,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.13dfc485.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\n\ntype Props = {\n  randomName: string,\n};\n\ntype State = {\n  time: string,\n  intervalId: number\n};\n\nexport class Clock extends React.Component<Props, State> {\n  today = new Date();\n\n  state = {\n    time: this.getRecentTime(),\n    intervalId: 0,\n  };\n\n  componentDidMount(): void {\n    this.setState({ time: this.getRecentTime() });\n\n    this.state.intervalId = window.setInterval(() => {\n      this.setState({ time: this.getRecentTime() });\n      console.info(this.state.time);\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.state.intervalId);\n  }\n\n  getRecentTime() {\n    this.today = new Date();\n\n    return this.today.toUTCString().slice(-12, -4);\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {this.props.randomName}\n        </strong>\n        <span> time is </span>\n        <span className=\"Clock__time\">{this.state.time}</span>\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { Clock } from './components/Clock';\nimport './App.scss';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  randomName: string,\n  hasClock: boolean,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    randomName: 'Clock-0',\n    hasClock: true,\n    intervalId: 0,\n  };\n\n  componentDidMount(): void {\n    this.changeClockVisibility(false, 'contextmenu');\n    this.changeClockVisibility(true, 'click');\n\n    this.state.intervalId = window.setInterval(() => {\n      this.setState({ randomName: getRandomName() });\n    }, 3300);\n  }\n\n  componentDidUpdate(_prevProps:{}, prevState:State): void {\n    if (\n      this.state.hasClock && prevState.randomName !== this.state.randomName\n    ) {\n      console.debug(\n        `Renamed from ${prevState.randomName} to ${this.state.randomName}`,\n      );\n    }\n  }\n\n  componentWillUnmount(): void {\n    clearInterval(this.state.intervalId);\n  }\n\n  changeClockVisibility(shouldShow:boolean, typeListener: string) {\n    document.addEventListener(typeListener, event => {\n      event.preventDefault();\n\n      this.setState({ hasClock: shouldShow });\n    });\n  }\n\n  render() {\n    const { randomName, hasClock } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {hasClock && <Clock randomName={randomName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}