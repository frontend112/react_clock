{"version":3,"sources":["components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","today","Date","intervalId","state","time","getRecentTime","this","setState","window","setInterval","console","info","clearInterval","toUTCString","slice","className","props","randomName","React","Component","getRandomName","value","now","toString","App","hasClock","changeClockVisibility","_prevProps","prevState","debug","shouldShow","typeListener","document","addEventListener","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"8MAWaA,EAAb,4MACEC,MAAQ,IAAIC,KADd,EAGEC,WAAa,EAHf,EAKEC,MAAQ,CACNC,KAAM,EAAKC,iBANf,uDASE,WAA2B,IAAD,OACxBC,KAAKC,SAAS,CAAEH,KAAME,KAAKD,kBAE3BC,KAAKJ,WAAaM,OAAOC,aAAY,WACnC,EAAKF,SAAS,CAAEH,KAAM,EAAKC,kBAC3BK,QAAQC,KAAK,EAAKR,MAAMC,QACvB,OAfP,kCAkBE,WACEI,OAAOI,cAAcN,KAAKJ,cAnB9B,2BAsBE,WAGE,OAFAI,KAAKN,MAAQ,IAAIC,KAEVK,KAAKN,MAAMa,cAAcC,OAAO,IAAK,KAzBhD,oBA4BE,WACE,OACE,sBAAKC,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGT,KAAKU,MAAMC,aAEd,6CACA,sBAAMF,UAAU,cAAhB,SAA+BT,KAAKH,MAAMC,cAnClD,GAA2Bc,IAAMC,W,MCNjC,SAASC,IACP,IAAMC,EAAQpB,KAAKqB,MAAMC,WAAWT,OAAO,GAE3C,MAAM,SAAN,OAAgBO,GAQX,IAAMG,EAAb,4MACEtB,WAAa,EADf,EAGEC,MAAQ,CACNc,WAAY,UACZQ,UAAU,GALd,uDAQE,WAA2B,IAAD,OACxBnB,KAAKoB,uBAAsB,EAAO,eAClCpB,KAAKoB,uBAAsB,EAAM,SAEjCpB,KAAKJ,WAAaM,OAAOC,aAAY,WACnC,EAAKF,SAAS,CAAEU,WAAYG,QAC3B,QAdP,gCAiBE,SAAmBO,EAAeC,GAE9BtB,KAAKH,MAAMsB,UACRG,EAAUX,aACTX,KAAKH,MAAMc,YAEfP,QAAQmB,MAAR,uBACkBD,EAAUX,WAD5B,eAC6CX,KAAKH,MAAMc,eAxB9D,kCA6BE,WACEL,cAAcN,KAAKJ,cA9BvB,mCAiCE,SAAsB4B,EAAoBC,GAAuB,IAAD,OAC9DC,SAASC,iBAAiBF,GAAc,SAAAG,GACtCA,EAAMC,iBAEN,EAAK5B,SAAS,CAAEkB,SAAUK,SArChC,oBAyCE,WACE,OACE,sBAAKf,UAAU,MAAf,UACE,6CAEET,KAAKH,MAAMsB,UACR,cAAC,EAAD,CAAOR,WAAYX,KAAKH,MAAMc,oBA/C3C,GAAyBC,IAAMC,WCb/BiB,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.f2156250.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\n\ntype Props = {\n  randomName: string,\n};\n\ntype State = {\n  time: string,\n};\n\nexport class Clock extends React.Component<Props, State> {\n  today = new Date();\n\n  intervalId = 0;\n\n  state = {\n    time: this.getRecentTime(),\n  };\n\n  componentDidMount(): void {\n    this.setState({ time: this.getRecentTime() });\n\n    this.intervalId = window.setInterval(() => {\n      this.setState({ time: this.getRecentTime() });\n      console.info(this.state.time);\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.intervalId);\n  }\n\n  getRecentTime() {\n    this.today = new Date();\n\n    return this.today.toUTCString().slice(-12, -4);\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {this.props.randomName}\n        </strong>\n        <span> time is </span>\n        <span className=\"Clock__time\">{this.state.time}</span>\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { Clock } from './components/Clock';\nimport './App.scss';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  randomName: string,\n  hasClock: boolean,\n};\n\nexport class App extends React.Component<{}, State> {\n  intervalId = 0;\n\n  state = {\n    randomName: 'Clock-0',\n    hasClock: true,\n  };\n\n  componentDidMount(): void {\n    this.changeClockVisibility(false, 'contextmenu');\n    this.changeClockVisibility(true, 'click');\n\n    this.intervalId = window.setInterval(() => {\n      this.setState({ randomName: getRandomName() });\n    }, 3300);\n  }\n\n  componentDidUpdate(_prevProps:{}, prevState:State): void {\n    if (\n      this.state.hasClock\n      && prevState.randomName\n      !== this.state.randomName\n    ) {\n      console.debug(\n        `Renamed from ${prevState.randomName} to ${this.state.randomName}`,\n      );\n    }\n  }\n\n  componentWillUnmount(): void {\n    clearInterval(this.intervalId);\n  }\n\n  changeClockVisibility(shouldShow:boolean, typeListener: string) {\n    document.addEventListener(typeListener, event => {\n      event.preventDefault();\n\n      this.setState({ hasClock: shouldShow });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {\n          this.state.hasClock\n          && <Clock randomName={this.state.randomName} />\n        }\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}